name: Build & Deploy to ECS (Fargate)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: Optional image tag to deploy (defaults to branch-SHA)
        required: false

# Required for GitHub OIDC â†’ AWS STS
permissions:
  contents: read
  id-token: write

env:
  # ===== Region & ECS/ECR names (override per-repo if you want) =====
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: trupick-next
  ECS_CLUSTER: trupick-next-cluster
  ECS_SERVICE: trupick-next-service
  TASK_DEF_FILE: ecs-task-def.json   # template committed in your repo
  LOG_GROUP: /ecs/trupick-next
  CFN_STACK_NAME: ""                 # set to your stack name to auto-resolve names, or leave empty
  DEBUG_OIDC: "false"                # set "true" to print OIDC claims

concurrency:
  group: ecs-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Optional) Print OIDC token claims to debug trust-policy mismatches
      - name: Debug OIDC claims (optional)
        if: env.DEBUG_OIDC == 'true'
        shell: bash
        env:
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          ACTIONS_ID_TOKEN: ${{ env.ACTIONS_ID_TOKEN }}
        run: |
          set -euo pipefail
          TOK_JSON=$(curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
          IDT=$(echo "$TOK_JSON" | jq -r .value)
          echo "JWT length: ${#IDT}"
          PAY=$(echo "$IDT" | cut -d '.' -f2 | tr '_-' '/+' | base64 -d 2>/dev/null | jq .)
          echo "OIDC payload:"; echo "$PAY" | jq .
          echo "aud:      $(echo "$PAY" | jq -r '."aud" // .aud')"
          echo "owner:    $(echo "$PAY" | jq -r '."repository_owner"')"
          echo "repo:     $(echo "$PAY" | jq -r '."repository"')"
          echo "sub:      $(echo "$PAY" | jq -r '."sub"')"

      # Configure AWS creds via OIDC (no long-lived keys needed)
      - name: Configure AWS credentials (assume IAM role via OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}   # e.g. arn:aws:iam::451117107794:role/gitHub
          role-session-name: gha-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # ---- ECR login & repo ensure ----
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY"

      # ---- Build & push image ----
      - name: Compute image tag
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=${GITHUB_REF_NAME//\//-}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi
          echo "COMPUTED: $(cat $GITHUB_OUTPUT)"

      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          set -e
          echo "Building $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      # ---- Logs & roles wiring ----
      - name: Ensure CloudWatch log group exists (idempotent)
        run: aws logs create-log-group --log-group-name "$LOG_GROUP" || true

      - name: Inject task & execution role ARNs into task def
        run: |
          set -e
          EXEC_ROLE_ARN=$(aws iam get-role --role-name ECSExecRole-ECR --query 'Role.Arn' --output text)
          TASK_ROLE_ARN=$(aws iam get-role --role-name ECSTaskRole-App --query 'Role.Arn' --output text)
          sed -i "s#EXEC_ROLE_ARN_HERE#${EXEC_ROLE_ARN}#g" $TASK_DEF_FILE
          sed -i "s#TASK_ROLE_ARN_HERE#${TASK_ROLE_ARN}#g" $TASK_DEF_FILE
          echo "Injected:"
          grep -E '"executionRoleArn"|"taskRoleArn"' -n $TASK_DEF_FILE || true

      # ---- Optional: Derive ECS names from CloudFormation outputs ----
      - name: Resolve ECS names from CloudFormation (optional)
        if: env.CFN_STACK_NAME != ''
        run: |
          set -e
          OUT=$(aws cloudformation describe-stacks --stack-name "$CFN_STACK_NAME" --query 'Stacks[0].Outputs' --output json)
          CL=$(echo "$OUT" | jq -r '.[] | select(.OutputKey=="ClusterName") | .OutputValue')
          SV=$(echo "$OUT" | jq -r '.[] | select(.OutputKey=="ServiceName") | .OutputValue')
          if [ -n "$CL" ] && [ "$CL" != "null" ]; then echo "ECS_CLUSTER=$CL" >> $GITHUB_ENV; fi
          if [ -n "$SV" ] && [ "$SV" != "null" ]; then echo "ECS_SERVICE=$SV" >> $GITHUB_ENV; fi
          echo "Using ECS_CLUSTER=$(echo ${CL:-$ECS_CLUSTER})"
          echo "Using ECS_SERVICE=$(echo ${SV:-$ECS_SERVICE})"

      # ---- Render & register task definition ----
      - name: Render task definition with new image
        run: |
          jq --arg IMAGE_URI "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE_URI' \
            $TASK_DEF_FILE > task-def-rendered.json
          echo "Rendered task def:"; cat task-def-rendered.json

      - name: Register new task definition
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-rendered.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "$TASK_DEF_ARN"

      # ---- Update service ----
      - name: Validate cluster exists
        run: |
          DESC=$(aws ecs describe-clusters --clusters "${ECS_CLUSTER}" --query 'clusters[0].status' --output text || true)
          if [ "$DESC" != "ACTIVE" ]; then
            echo "Cluster not found or not ACTIVE: $ECS_CLUSTER in region $AWS_REGION" >&2
            aws ecs list-clusters
            exit 1
          fi

      - name: Update ECS service to new task def
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${TASK_DEF_ARN}" \
            --force-new-deployment

      - name: Wait for service stability
        run: aws ecs wait services-stable --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}"
